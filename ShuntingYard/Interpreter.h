#pragma once

#include "Types.h"
#include "String.h"

#include <vector>


class Interpreter
{
public:
	Interpreter();
	~Interpreter();

private:
	enum KEYWORDS {
		KEYWORD_NONE = 0,
	};

	enum DATATYPES {
		DATATYPE_NONE = 0,
		DATATYPE_INT,
		DATATYPE_STRING,
	};

	enum SYMBOLS {
		SYMBOL_NONE = 0,
		SYMBOL_EQUAL,
		SYMBOL_COLON,
		SYMBOL_SEMICOLON,
		SYMBOL_HASHTAG,
		SYMBOL_QUOTATION,
		SYMBOL_OPEN_PARANTHESIS,
		SYMBOL_CLOSE_PARANTHESIS,
		SYMBOL_OPEN_BRACKET,
		SYMBOL_CLOSE_BRACKET,
		SYMBOL_OPEN_SQUARE_BRACKET,
		SYMBOL_CLOSE_SQUARE_BRACKET,
		SYMBOL_COMPARE_EQUAL,
		SYMBOL_COMPARE_NOT_EQUAL,
		SYMBOL_COMPARE_BIGGER,
		SYMBOL_COMPARE_LESS,
		SYMBOL_NEGATION,
		SYMBOL_PLUS,
		SYMBOL_PRE_INCREMENT,
		SYMBOL_POST_INCREMENT,
		SYMBOL_MINUS,
		SYMBOL_PRE_DECREMENT,
		SYMBOL_POST_DECREMENT,
		SYMBOL_BACK_SLASH,
		SYMBOL_FRONT_SLASH,
		SYMBOL_ASTERIX,
		SYMBOL_POWER,
		SYMBOL_COMMA,
		SYMBOL_PUNCTUATION,
	};

	std::vector<String> expressions;

	bool Lexical(class Stream &);
};

